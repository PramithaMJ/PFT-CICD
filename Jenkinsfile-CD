// JENKINS CD PIPELINE
//  image stored in Dockerhub will be deployed using K8s
// Store your EC2 instance username & key in Jenkins credentials

pipeline {
    agent any
    // DECLARE THE VARIABLES HERE:
    environment {
    NODE_IP = '172.31.49.21'   //  Node-Server private IP here
    EC2_NAME = "ec2-user"                  //  AWS EC2 username
    PIPELINE_NAME = "PFT-CI-PIPLINE"          //  pipeline name
    PROJECT_NAME = "PFT-DevOps"        //  project name
    }

    stages {
        stage("Pull Files") {
            // Copy K8s manifest files from Master-Server workspace to Node-server
            steps {
              sshagent(['my_ec2_creds']) {         // install 'ssh agent' plugin & generate 'ssh-agent' pipeline syntax generator
                sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP}"   // enter your Node Server's private IP here
                sh "scp /var/lib/jenkins/workspace/${PIPELINE_NAME}/deployment.yaml ${EC2_NAME}@${NODE_IP}:/home/ec2-user/"
                sh "scp /var/lib/jenkins/workspace/${PIPELINE_NAME}/service.yaml ${EC2_NAME}@${NODE_IP}:/home/ec2-user/"
              }
            }
        }

      //  stage('Approval') {
          // If 'manual approval' is required, then it is called 'Continuous Delivery'
          // If it is totally automated, then it is called 'Continuous Deployment'
     //       steps {
     //           input message: 'Approve deployment?'
     //       }
      //  }

        stage("Deployment") {
          // K8s Deployment using Ansible
           // Ensure to establish passwordless connection between Master & Node first
          // Your deployment.yaml file must contain the Dockerhub image within the container block
            steps {
              sshagent(['my_ec2_creds']) {          // store EC2 username & pem-key in Jenkins credentials
                sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP}"   // enter your Node-Server private IP here
                sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP} kubectl apply -f deployment.yaml"
                sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP} kubectl apply -f service.yaml"
                sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP} kubectl rollout restart deploy"
                sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP} kubectl get service"
              }
            }
        }
    }
}
